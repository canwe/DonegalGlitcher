/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ImagePanel.java
 *
 * Created on 19-Nov-2011, 14:59:57
 */
package image.gui;

import image.Image;
import donegalglitcher.action.Actions;
import donegalglitcher.gui.View;
import java.awt.Dimension;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JViewport;

/**
 *
 * @author Dietmar
 */
public class ImagePanel extends javax.swing.JPanel implements ComponentListener {

    private BufferedImage image = null;
    private BufferedImage original = null;
    private boolean autoscale = false;

    /**
     * Creates new form ImagePanel
     */
    public ImagePanel() {
        initComponents();
        addMouseListener(new PopupListener());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void paint(java.awt.Graphics g) {
        super.paintComponent(g);
        if (null == image) {
            return;
        }
        if (autoscale) {
            g.drawImage(image, 0, 0, null);
        } else {
            g.drawImage(original, 0, 0, null);
        }
    }

    @Override
    public Dimension getPreferredSize() {
        if (image == null) {
            return new Dimension(0, 0);
        }
        if (autoscale) {
            return new Dimension(image.getWidth(), image.getHeight());
        }
        if (original == null) {
            return new Dimension(0,0);
        }
        return new Dimension(original.getWidth(), original.getHeight());
    }

    /**
     *
     * @param newImage
     */
    public void setImage(Image newImage) {
        if (null == newImage || !newImage.getTyp().isImage()) {
            original = null;
            image = null;
            setSize(0, 0);
        } else {
            this.original = newImage.getImage();
            if (this.original == null) {
                setSize(0, 0);
            } else {
                this.image = new BufferedImage(original.getWidth(), original.getHeight(), original.getType());
                scale();
                setSize(this.image.getWidth(), image.getHeight());
            }
        }
        invalidate();
    }

    private void scale() {
        if (image == null) {
            return;
        }
        Dimension viewPortSize = ((JViewport) getParent()).getExtentSize();
        double ratioX = viewPortSize.getWidth() / original.getWidth();
        double ratioY = viewPortSize.getHeight() / original.getHeight();

        double ratio = Math.min(ratioX, ratioY);
        System.out.println("Ratio: " + ratio);
        AffineTransformOp aop = new AffineTransformOp(AffineTransform.getScaleInstance(ratio, ratio), AffineTransformOp.TYPE_BICUBIC);
        image = aop.filter(original, null);
        setSize(image.getWidth(), image.getHeight());
    }

    /**
     *
     */
    public void toggleAutoscale() {
        autoscale = !autoscale;
        if (autoscale) {
            scale();
        } else {
            this.setSize(original.getWidth(), original.getHeight());
        }
        invalidate();
    }

    @Override
    public void componentResized(ComponentEvent e) {
        if (autoscale) {
            scale();
        }
        invalidate();
    }

    @Override
    public void componentMoved(ComponentEvent e) {
    }

    @Override
    public void componentShown(ComponentEvent e) {
    }

    @Override
    public void componentHidden(ComponentEvent e) {
    }

    class PopupListener extends MouseAdapter {

        @Override
        public void mousePressed(MouseEvent e) {
            maybeShowPopup(e);
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            maybeShowPopup(e);
        }

        private void maybeShowPopup(MouseEvent e) {
            if (e.isPopupTrigger()) {
                JPopupMenu menu = new JPopupMenu();
                menu.add(Actions.AUTOSCALE.getMenuItem());
                menu.show(e.getComponent(),
                        e.getX(), e.getY());
            }
        }
    }
}
